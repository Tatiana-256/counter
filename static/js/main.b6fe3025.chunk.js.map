{"version":3,"sources":["components/Counter/counter.module.css","components/Button/button.jsx","components/Counter/counter.jsx","components/SettingsCounter/SettingsCounter.jsx","redux/reducer.ts","redux/action.ts","App.tsx","serviceWorker.js","redux/store.ts","index.js"],"names":["module","exports","Button","props","className","styles","btn","onClick","handle","name","Counter","general","bord","this","maxValue","startValue","error","classNumber","state","count","classForSett","increment","namesBtn","classBtn","resetCounter","React","Component","SettingsCounter","onNumberChange","e","addMaxValue","currentTarget","value","onSetNumberChange","addStartValue","setting","classSet","type","inp","onChange","classMin","setSettings","initialState","reducer","action","number","actions","Number","App","incrementCounter","numberRed","regular","disabled","sett","incrementMax","incrementStart","decrementMax","decrementStart","connect","dispatch","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b6fe3025.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"general\":\"counter_general__3e3-B\",\"btn\":\"counter_btn__3KZ1O\",\"bord\":\"counter_bord__3fRsQ\",\"numberRed\":\"counter_numberRed__2B4Yj\",\"regular\":\"counter_regular__1Nddi\",\"sett\":\"counter_sett__2Xvv1\",\"error\":\"counter_error__1vjy8\",\"disabled\":\"counter_disabled__1JYil\",\"setting\":\"counter_setting__2lCLZ\",\"inc_decr\":\"counter_inc_decr__3JYyT\",\"id\":\"counter_id__b_fcB\",\"inp\":\"counter_inp__2LciC\"};","import React from 'react';\r\nimport styles from \"./Button.module.css\"\r\n\r\nconst Button = (props) => {\r\n\r\n    return <div>\r\n        <button className={styles.btn} onClick={props.handle}>\r\n            {props.name}\r\n        </button>\r\n    </div>\r\n}\r\n\r\nexport default Button","import React from 'react';\r\nimport styles from \"./counter.module.css\"\r\nimport Button from \"../Button/button\";\r\n\r\nclass Counter extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n        return (<div className={styles.general}>\r\n            <div className={styles.bord}>\r\n                {this.props.maxValue < 0 || this.props.startValue < 0 || this.props.maxValue <= this.props.startValue ?\r\n                    <div className={styles.error}>\r\n                        <div>Incorrect value.</div>\r\n                        <div> 1. Max value or start value must be more than 0</div>\r\n                        <div> 2. Max value can`t be same to start value</div>\r\n                    </div> : <div\r\n                        className={this.props.classNumber}>{this.props.state.count}</div>}\r\n                <div className={styles.btn}>\r\n                    <div className={this.props.classForSett}>\r\n                        <Button handle={this.props.increment} name={this.props.namesBtn[0]}/>\r\n                    </div>\r\n                    <div className={this.props.classBtn}>\r\n                        <Button handle={this.props.resetCounter} name={this.props.namesBtn[1]}\r\n                                count={this.props.state.count}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Counter","import React from 'react';\r\nimport styles from \"../Counter/counter.module.css\";\r\nimport Button from \"../Button/button\";\r\n\r\n\r\nclass SettingsCounter extends React.Component {\r\n    onNumberChange = (e) => {\r\n        this.props.addMaxValue(e.currentTarget.value)\r\n    }\r\n\r\n    onSetNumberChange = (e) => {\r\n        this.props.addStartValue(e.currentTarget.value)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={styles.general}>\r\n                <div className={styles.bord}>\r\n                    <div className={styles.setting}>\r\n                        <div>Max value</div>\r\n                        <div className={this.props.classSet}>\r\n                            <input type=\"number\" value={this.props.maxValue} className={styles.inp}\r\n                                   onChange={this.onNumberChange}/>\r\n                            {/*<div className={styles.inc_decr}>*/}\r\n                            {/*    <div className={styles.id} onClick={() => {*/}\r\n                            {/*        this.props.incrementMax()*/}\r\n                            {/*    }}>+*/}\r\n                            {/*    </div>*/}\r\n                            {/*    <div className={styles.id} onClick={() => {*/}\r\n                            {/*        this.props.decrementMax()*/}\r\n                            {/*    }}>-*/}\r\n                            {/*    </div>*/}\r\n                            {/*</div>*/}\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.setting}>\r\n                        <div>Start value</div>\r\n                        <div className={this.props.classMin}>\r\n                            <input type=\"number\" value={this.props.startValue} className={styles.inp}\r\n                                   onChange={this.onSetNumberChange}/>\r\n                            {/*<div className={styles.inc_decr}>*/}\r\n                                {/*<div className={styles.id} onClick={() => {*/}\r\n                                {/*    this.props.incrementStart()*/}\r\n                                {/*}}>+*/}\r\n                                {/*</div>*/}\r\n                                {/*<div className={styles.id} onClick={() => {*/}\r\n                                {/*    this.props.decrementStart()*/}\r\n                                {/*}}>-*/}\r\n                                {/*</div>*/}\r\n                            {/*</div>*/}\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.btn}>\r\n                        <div className={this.props.classBtn}>\r\n                            <Button\r\n                                handle={this.props.setSettings} name='Save settings'/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default SettingsCounter","import {ActionsType} from \"./action\";\r\n\r\nexport const ADD_MAX_VALUE = 'ADD_MAX_VALUE'\r\nexport const ADD_START_VALUE = 'ADD_START_VALUE'\r\nexport const INCREMENT_COUNTER = 'INCREMENT_COUNTER'\r\nexport const RESET_COUNTER = 'RESET_COUNTER'\r\nexport const INCREMENT_MAX_VALUE = 'INCREMENT_MAX_VALUE'\r\nexport const DECREMENT_MAX_VALUE = 'DECREMENT_MAX_VALUE'\r\nexport const INCREMENT_START_VALUE = 'INCREMENT_START_VALUE'\r\nexport const DECREMENT_START_VALUE = 'DECREMENT_START_VALUE'\r\nexport const SET_SETTINGS = 'SET_SETTINGS'\r\n\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    count: 0,\r\n    maxValue: 1,\r\n    startValue: 0\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                maxValue: action.number\r\n            }\r\n        case ADD_START_VALUE:\r\n            return {\r\n                ...state,\r\n                startValue: action.number\r\n            }\r\n        case INCREMENT_COUNTER:\r\n            return {...state, count: state.count + 1}\r\n        case RESET_COUNTER:\r\n            return {...state, count: state.startValue}\r\n        case INCREMENT_MAX_VALUE:\r\n            return {...state, maxValue: state.maxValue + 1}\r\n        case DECREMENT_MAX_VALUE:\r\n            return {...state, maxValue: state.maxValue - 1}\r\n        case INCREMENT_START_VALUE:\r\n            return {...state, startValue: state.startValue + 1}\r\n        case DECREMENT_START_VALUE:\r\n            return {...state, startValue: state.startValue - 1}\r\n        case SET_SETTINGS:\r\n            return {...state, count: state.startValue}\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default reducer","import {\r\n    ADD_MAX_VALUE,\r\n    ADD_START_VALUE,\r\n    DECREMENT_MAX_VALUE,\r\n    DECREMENT_START_VALUE,\r\n    INCREMENT_COUNTER,\r\n    INCREMENT_MAX_VALUE,\r\n    INCREMENT_START_VALUE,\r\n    RESET_COUNTER,\r\n    SET_SETTINGS\r\n} from \"./reducer\";\r\nimport {InferActionsTypes} from \"./store\";\r\n\r\n\r\n// _____________________action types_________________\r\nexport type ActionsType = InferActionsTypes<typeof actions>\r\n\r\n\r\n// ______________________actions_________________\r\n\r\nexport const actions = {\r\n    incrementMax: () => ({type: INCREMENT_MAX_VALUE} as const),\r\n    decrementMax: () => ({type: DECREMENT_MAX_VALUE} as const),\r\n    incrementStart: () => ({type: INCREMENT_START_VALUE} as const),\r\n    decrementStart: () => ({type: DECREMENT_START_VALUE} as const),\r\n    addMaxValue: (number: number) => ({\r\n        type: ADD_MAX_VALUE,\r\n        number: Number(number)\r\n    } as const),\r\n    addStartValue: (number: number) => ({\r\n        type: ADD_START_VALUE,\r\n        number: Number(number)\r\n    } as const),\r\n    incrementCounter: () => ({type: INCREMENT_COUNTER} as const),\r\n    resetCounter: () => ({type: RESET_COUNTER} as const),\r\n    setSettings: () => ({type: SET_SETTINGS} as const)\r\n}","import React from 'react';\nimport Counter from \"./components/Counter/counter\";\nimport SettingsCounter from \"./components/SettingsCounter/SettingsCounter\";\nimport \"./App.css\"\nimport styles from \"./components/Counter/counter.module.css\";\nimport {connect} from \"react-redux\";\nimport {initialStateType} from \"./redux/reducer\";\nimport {actions} from \"./redux/action\";\n\n\ntype mapStateToPropsType = {\n    state: initialStateType,\n}\n\ntype mapDispatchToPropsType = {\n    addStartValue: (number: number) => void\n    addMaxValue: (number: number) => void\n    incrementMax: () => void\n    decrementMax: () => void\n    decrementStart: () => void\n    setSettings: () => void\n    resetCounter: () => void\n    incrementCounter: () => void\n    incrementStart: () => void\n}\n\ntype TOwnProps = {}\n\ntype PropsType = mapDispatchToPropsType & mapStateToPropsType & TOwnProps\n\n\nclass App extends React.Component<PropsType> {\n\n\n    namesBtn = [\"Increment\", \"Reset\"]\n\n\n    incrementCounter = () => {\n        if (this.props.state.count < this.props.state.maxValue) {\n            return this.props.incrementCounter()\n        } else return this.props.state.count\n    }\n\n\n    render() {\n        let classNumber = this.props.state.count === this.props.state.maxValue ? styles.numberRed : styles.regular;\n        let classBtn = this.props.state.count === this.props.state.startValue || this.props.state.startValue >= this.props.state.maxValue ||\n        this.props.state.startValue < 0 ? styles.disabled : \"\";\n        let classForSett = this.props.state.startValue >= this.props.state.maxValue || this.props.state.startValue < 0 ? styles.disabled : \"\";\n        let classSet = this.props.state.startValue > this.props.state.maxValue ? styles.sett : styles.regular\n        let classMin = this.props.state.startValue < 0 ? styles.sett : styles.regular\n\n        return (\n            <div className=\"App\">\n                <SettingsCounter\n                    addStartValue={this.props.addStartValue}\n                    addMaxValue={this.props.addMaxValue}\n                    incrementMax={this.props.incrementMax}\n                    incrementStart={this.props.incrementStart}\n                    decrementMax={this.props.decrementMax}\n                    decrementStart={this.props.decrementStart}\n                    setSettings={this.props.setSettings}\n                    maxValue={this.props.state.maxValue}\n                    startValue={this.props.state.startValue}\n                    classSet={classSet}\n                    classMin={classMin}\n                    classBtn={classForSett}\n                />\n\n                < Counter\n                    classNumber={classNumber}\n                    classBtn={classBtn}\n                    classForSett={classForSett}\n                    state={this.props.state}\n                    resetCounter={this.props.resetCounter}\n                    increment={this.incrementCounter}\n                    namesBtn={this.namesBtn}\n                    maxValue={this.props.state.maxValue}\n                    startValue={this.props.state.startValue}\n                />\n            </div>\n        )\n            ;\n    }\n}\n\n\nconst mapStateToProps = (state: initialStateType): mapStateToPropsType => {\n    return {\n        state: state\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        addStartValue: (number: number) => {\n            dispatch(actions.addStartValue(number))\n        },\n        addMaxValue: (number: number) => {\n            dispatch(actions.addMaxValue(number))\n        },\n        incrementMax: () => {\n            dispatch(actions.incrementMax())\n        },\n        decrementMax: () => {\n            dispatch(actions.decrementMax())\n        },\n        decrementStart: () => {\n            dispatch(actions.decrementStart())\n        },\n        setSettings: () => {\n            dispatch(actions.setSettings())\n        },\n        resetCounter: () => {\n            dispatch(actions.resetCounter())\n        },\n        incrementCounter: () => {\n            dispatch(actions.incrementCounter())\n        },\n        incrementStart: () => {\n            dispatch(actions.incrementStart())\n        }\n\n\n    }\n}\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, TOwnProps, initialStateType>\n(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>\r\n\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}><App/></Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}